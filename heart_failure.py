# -*- coding: utf-8 -*-
"""Heart_Failure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nZRZ1PkClvk-vit_tYjwTtKBYYF8HCqj
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import metrics #to calculate accuracy score as knn is a classification method so not r2 score
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/Heart_Failure_Clinic_Record - Heart_Failure_Clinic_Record.csv')
print(df)

df.info()

df.columns

x = df.drop(['DEATH_EVENT','sex','time'], axis=1)
y = df['DEATH_EVENT']
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.8, random_state = 20)
k_range = list(range(1,45)) #random range
scores = [] #to store the accuracy score
for k in k_range:
   knn = KNeighborsClassifier(n_neighbors=k, p=1) # distance cal method(p=1 means Manhattan distance)
   knn.fit(x_train, y_train) #train
   y_pred = knn.predict(x_test)
   scores.append(metrics.accuracy_score(y_test, y_pred))
#print(accuracy_score(y_test, y_pred)*100) # it just prints the accuracy of  last found value tht has been appended to scores
plt.plot(k_range, scores)
plt.xlabel('Value of K for KNN')
plt.ylabel('Accuracy Score')
plt.title('Accuracy Scores for Values of K of K-Nearest-Neighbors')
plt.show()

print(scores)

# Find the optimal k value
optimal_k = k_range[scores.index(max(scores))]
print(f'The optimal number of neighbors is {optimal_k}')

knn = KNeighborsClassifier(n_neighbors = optimal_k, p=1)
knn.fit(x_train, y_train)
y_pred = knn.predict(x_test)
print(accuracy_score(y_test, y_pred)*100)

knn.predict([[50,1,111,0,20,0,210000,1.9,137,0]])